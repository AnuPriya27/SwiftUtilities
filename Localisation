
// Extension Bundle To LocaliseÂ UIElement Of StoryBoard


import Foundation
//MARK: Localization configure bundle
extension Bundle {
    class func setLanguage(_ language: String) {
        var onceToken: Int = 0
        
        if (onceToken == 0) {
           // TODO: move below code to a static variable initializer (dispatch_once is deprecated) /
            object_setClass(Bundle.main, PrivateBundle.self)
        }
        onceToken = 1
        objc_setAssociatedObject(Bundle.main, &associatedLanguageBundle, (language != nil) ? Bundle(path: Bundle.main.path(forResource: language, ofType: "lproj") ?? "") : nil, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
    }
}
private var associatedLanguageBundle:Character = "0"

class PrivateBundle: Bundle {
    override func localizedString(forKey key: String, value: String?, table tableName: String?) -> String {
        let bundle: Bundle? = objc_getAssociatedObject(self, &associatedLanguageBundle) as? Bundle
        return (bundle != nil) ? (bundle!.localizedString(forKey: key, value: value, table: tableName)) : (super.localizedString(forKey: key, value: value, table: tableName))
    }
}


// How to Use 
// 1 - create a String to set Language Value in UserDefault
// 2 - Set Base Language as Default Applying Condition For UserDefault Data 
//  langCode = users.object(forKey: EnumUserDefaultKey.langCode.userKey) as? String
//   Bundle.setLanguage((langCode != nil) ? langCode!  : "en")
// 3 - If You are Using Arabic Language You should Flip code Also, then use following method to Flip whole View 
// Method to flip UIView 
  func ChangeLayout(){
        let langCode = users.object(forKey: EnumUserDefaultKey.langCode.userKey) as? String
        if(langCode == "ar"){
            UIView.appearance().semanticContentAttribute = .forceRightToLeft
        }else{
            UIView.appearance().semanticContentAttribute = .forceLeftToRight
            UIImageView.appearance().semanticContentAttribute = .forceRightToLeft
        }
    }
